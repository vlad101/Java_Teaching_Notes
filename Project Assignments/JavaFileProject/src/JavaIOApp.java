/*******************************************************************
 * The Java Input/Output Processing Filter Program.                *
 * @author: Vladimir Efros                                         *
 * This program filters out active hexadecimal from inactive IDs   *
 * that are generated by the company's server and matched up with  *
 * the client's group files.                                       *
 *******************************************************************/

import java.util.Random;
import java.util.Scanner;
import java.sql.Timestamp;
import java.io.PrintWriter;
import java.io.IOException;
import java.io.File;
import java.util.Set;
import java.util.HashSet;

/**
 * The test drive of the File Filter Processing Program.
 */
public class JavaIOApp
{
	// Create a HashSet to hold hexadecimal ID String Objects.
	public static  Set<String> hexNumSet = new HashSet<String>();
        
	public static void main(String[] args) throws IOException
	{
		// The start time of the program
		long start = System.currentTimeMillis();
		
 		// Generate a String with the Randomly Generated 
                // information for the Server log file.
		String logFileInfo = genServerLogFile();

		// Create if it does not exist and write log server file.
		writeToServerLogFile(logFileInfo);

		// Generate the 300 Partner Group files with the 
                // randomly generated hexadecimal IDs.
		creClientFiles();

		// Get the Directory where the Partner Group files are stored.
		String fileDirectory = "/home/vladimir/Desktop/We-Care.ComFileProject/partnerGroupFiles/";

		// Create the new Directory Object that will contain  the Partner Group files.
		File folder = new File(fileDirectory);

		// Create an array of the partner group files that 
                // is to be processed for matching.
		File[] listOfFiles = folder.listFiles();

		// Find the number of actual text files excluding directories, 
                // if there are directories, report it.
		int filesNum = getNumFiles(listOfFiles.length, listOfFiles);
		
		// Create an array of file objects, the size is the 
                // actual number of the valid text files.
		FileObj[] file = new FileObj[filesNum];
		
		// Determine whether the element is File or Directory.
		// If the file exists, the Object File will created.
		createObjFile(listOfFiles, file);
                
                // Removed in order to get a neat console output.
		// --> OPTIONAL <-- Get the names of the created files.
		// getFileName(filesNum, file);

		// Get the number of Objects of the partner group files - randomly generated 300 files.
		getNumOfObj();

		// Read the Server log file and Search file for the hexadecimal 
                // number, the lenght of each ID is 7 numbers and letters.
		readServerLogFile();

		// Read the contents of each partner group file and get matches of the active files.
		readFile(filesNum, file);

		//  --> OPTIONAL <-- Display the elements of the Set and the total number of the elements.
		getElemsHashSet(); 

		// The end time of the program
		long end = System.currentTimeMillis();
                
                // Report the total running time of the Filter program.
		System.out.println("The program's running time is " + (end - start) + " milliseconds!");
	}
        
        /**
         * The readFile method reads the group text file and extracts the valid hexadecimal IDs.
         * @param num The total number of valid partner group text files.
         * @param f The array of the partner's text files.
         * @throws IOException is thrown when the file does not exist.
         */
	private static void readFile(int num, FileObj[] f) throws IOException
	{
		for(int i = 0; i < num; i++)
			f[i].readFile();
	}
	
        /**
         * The getElemsHashSet method adds ID to a HashSet, duplicates are not allowed.
         */
	private static void getElemsHashSet()
	{	
		int count = 0;
		for(String element : hexNumSet)
		{
			//  --> OPTIONAL <-- System.out.println(element);
			count++;
		}
		System.out.println("There are " + count + " unique active hexadecimal IDs in the set!" + 
                                    " Duplicates in the server log file: " + (1000000 - count));
	}
        
        /**
         * The readServerLogFile method reads data from the server log file 
         * and passes the output of the file to createHexSetServerLogFile method
         * for storage of the hexadecimal ID into the HashSet.
         * @throws IOException is thrown if file does not exist.
         */
	private static void readServerLogFile() throws IOException
	{
		// Get the file name of the Server Log File.
		File file = new File("/home/vladimir/Desktop/We-Care.ComFileProject/serverLogFiles/TuesdayActiveIDs.log");
		Scanner inputFile = new Scanner(file);

		// Read Lines from the file until the end of file.
		while(inputFile.hasNext())
		{
			// Read the next line.
			String line = inputFile.nextLine();
			
			// Store all the hexadimal ID numbers into the set.
			createHexSetServerLogFile(line);			
		}

		// Close the File
		inputFile.close();
	}

        /**
         * The createHexSetServerLogFile method adds IDs to the HashSet.
         * @param input The string is split at the whitespace delimeter if the 
         * String has the length 7 characters, that the String is hexadecimal 
         * ID will be stores into the HashSet.
         */
	private static void createHexSetServerLogFile(String input)
	{
		// Split the input String and store the hexadecimal 
		// ID that has the length of seven characters into the set collection. 
		String[] splitter = input.split(" ");
		for(int i = 0; i < splitter.length; i++)
			if(splitter[i].length() == 7)
				hexNumSet.add(splitter[i]); // Add each element to the HashSet Function.
	}
	
        /**
         * The creClientFiles method creates 300 partner group files each 
         * containing randomly generated hexadecimal IDs.
         * @throws IOException if the file does not exist.
         */
	private static void creClientFiles() throws IOException
	{
		for(int i = 1; i < 301; i++)	
		{
			// Generate a String with the info for the 300 Partner Group file.
			String partnerGoupFileInfo = genPartnerGroupFile();

			// Generate the names for 300 Partner Group files.
			String filename = "Grp" + i + ".txt";

			// Write the info to the 300 separate Partner Group files.
			writeToPartnerGroupFile(partnerGoupFileInfo, filename);
		}
	}
        
        /**
         * The getNumOfObj method displays the amount of the generated client group files.
         */
	private static void getNumOfObj()
	{
		System.out.println("The number of object Client Group files created: " + FileObj.getObjNum());
	}
        
        /**
         * The createObjFile method filters out files from from directories. If it is file, then the object
         * partner file is create, otherwise no object is created.
         * @param list The array of all the elements of the directory.
         * @param f The array of the partner's text files.
         */
	private static void createObjFile(File[] list, FileObj[] f)
	{
		int i = 0;  // Total file/Directory counter
		int j = 0;  // Object file counter
		
		while(i < list.length)
		{
			// Is it a folder?
			if(list[i].isDirectory())
			{
				System.out.println("Directory! Object is not created! " + list[i].getName());
			}
			// Is it a file?
			else if(list[i].isFile())
			{
				f[j] = new FileObj(list[i]);
				j++;
			}
			i++;
		}
	}

        /**
         * The getNumFiles method calculates the actual number of the files ending with .txt
         * @param len The length of the array of all the elements of the directory.
         * @param list The array of all the elements of the directory.
         * @return 
         */
	private static int getNumFiles(int len, File[] list)
	{
		int i = 0; 
		int filesNum = 0; // Cout the number of valid files
		while(i < len)
		{
			if(list[i].getName().endsWith(".txt") || list[i].isFile())
				filesNum++;
			i++;
		}
		return filesNum;
	}		
        
        /**
         * The writeToPartnerGroupFile method writes the Randomly generated information to the partner group file.
         * @param partnerInfo The String information that will be filled into each group text file.
         * @param nameOfFile The name of the file where data will be stored.
         * @throws IOException 
         */
	private static void writeToPartnerGroupFile(String partnerInfo, String nameOfFile) throws IOException
	{
		// Open the file or create the file if it does not exist.
		PrintWriter outputFile = new PrintWriter("/home/vladimir/Desktop/We-Care.ComFileProject/partnerGroupFiles/" + nameOfFile);
		
		// Write the information to the log file.
		outputFile.println(partnerInfo);
		
		// Close the file.
		outputFile.close();
		//  --> OPTIONAL <-- System.out.println("Data Written to the Partner group file!");
	}
        
        /**
         * The genPartnerGroupFile method generates String containing 30,000 entries, hexadecimal IDs.
         * @return The String containing all of the group text data.
         */
	private static String genPartnerGroupFile()
	{
		char[] ch = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
		Random rand = new Random();
		StringBuilder builder = new StringBuilder();
		
		// Generate 30000 entries for each file.
		for(int j = 0; j < 30000; j++)
        {
			int num;
			for(int i = 0; i < 7; i++)
			{
				num = rand.nextInt(16);  // Hexadecimal ID
				builder.append(ch[num]);
			}
			builder.append("\n");
		}
		// Return the String with all the information for the partner group files.
		return builder.toString();
	}
        
        /**
         * The writeToServerLogFile method writes the server generated String to the file.
         * @param logInfo The String containing all of the server data log file.
         * @throws IOException 
         */
	private static void writeToServerLogFile(String logInfo) throws IOException
	{
		// Open the file or create the file if it does not exist.
		PrintWriter outputFile = new PrintWriter("/home/vladimir/Desktop/We-Care.ComFileProject/serverLogFiles/TuesdayActiveIDs.log");
		
		// Write the information to the log file.
		outputFile.println(logInfo);
		
		// Close the file.
		outputFile.close();
		//  --> OPTIONAL <-- System.out.println("Data Written to the Server log file!");
	}
         
        /**
         * The genServerLogFile method generates a TuesdayActiveIDs.log file that contains 
         * 1 million entries (IP address, timestamp, ID - 7-digit hexadecimal number).
         */
	private static String genServerLogFile()
	{
		char[] ch = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
		Random rand = new Random();
		StringBuilder builder = new StringBuilder();

		// Heading of the log file.
		builder.append("#ID Generator We-Care.com server\n");		
		builder.append("#Date: " + new Timestamp(System.currentTimeMillis()) + "\n");
		builder.append("#Fields: IP date time ID\n");
		
		// Generate 1 million entries.
		for(int j = 0; j < 1000000; j++)
        {
			// IP address and Current TimeStamp
			builder.append("108.46.4.219     "+ new Timestamp(System.currentTimeMillis()) + "     ");
			for(int i = 0; i < 7; i++)
			{
				// Hexadecimal ID
				int num = rand.nextInt(16);
				builder.append(ch[num]);
			}
			builder.append("\n");
		}
		// Return the String with all the information for the log file.
		return builder.toString();
	}
}